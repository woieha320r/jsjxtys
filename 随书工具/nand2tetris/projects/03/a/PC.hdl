// Mux16(a = preOut, b = addOut, sel = inc, out = o1);
//     Mux16(a = o1, b = in, sel = load, out = o2);
//     Mux16(a = o2, b = false, sel = reset, out = o3);
//     Register(in = o3, load = true, out = preOut, out = out);
//     Inc16(in = preOut, out = addOut);


// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    // reset
    // Mux16(a=lastRes, b[0..15]=false, sel=reset, out=afterReset);
    // load
    // !reset && load
    // Xor(a=reset, b=true, out=notSet);
    // And(a=notSet, b=load, out=whetherLoad);
    // Mux16(a=afterReset, b=in, sel=whetherLoad, out=afterLoad);
    // inc
    // !reset && !load && inc
    // Xor(a=load, b=true, out=notLoad);
    // And(a=notSet, b=notLoad, out=notSetNotLoad);
    // And(a=notSetNotLoad, b=inc, out=whetherInc);
    // Inc16(in=afterLoad, out=incRes);
    // Mux16(a=afterLoad, b=incRes, sel=whetherInc, out=waitOut);
    // 通过寄存器添加时序逻辑和回路反馈
    // Register(in=waitOut, load=true, out=out, out=lastRes);
    Inc16(in=lastRes, out=incRes);
    Mux16(a=lastRes, b=incRes, sel=inc, out=afterInc);
    Mux16(a=afterInc, b=in, sel=load, out=afterLoad);
    Mux16(a=afterLoad, b[0..15]=false, sel=reset, out=res);
    Register(in=res, load=true, out=lastRes, out=out);
}

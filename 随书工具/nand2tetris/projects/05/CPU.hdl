// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 指令是否是c指令
    Xor(a=instruction[15], b=false, out=isC);
    Not(in=isC, out=isA);

    // A寄存器
// C指令下，是否将ALU结果置入A
    Mux16(a=instruction, b=aluRes, sel=isC, out=waitInA);
    And(a=instruction[5], b=isC, out=cInA);
// A指令下直接置入A
    Or(a=cInA, b=isA, out=inA);
    // 输出addressM
    ARegister(in=waitInA, load=inA, out=outA, out[0..14]=addressM);

    // ALU除D外的另一个寄存器的输入来自于A还是M
    Xor(a=instruction[12], b=false, out=whetherFromM);
    And(a=isC, b=whetherFromM, out=fromM);
    Mux16(a=outA, b=inM, sel=fromM, out=fromAM);

    // D寄存器
    // C指令下，是否将ALU结果置入D
    And(a=instruction[4], b=isC, out=inD);
    DRegister(in=aluRes, load=inD, out=outD);

    // ALU
    // C指令，ALU才执行函数。否则执行000000
    And(a=isC, b=instruction[11], out=isZx);
    And(a=isC, b=instruction[10], out=isNx);
    And(a=isC, b=instruction[9], out=isZy);
    And(a=isC, b=instruction[8], out=isNy);
    And(a=isC, b=instruction[7], out=isF);
    And(a=isC, b=instruction[6], out=isN);
    ALU(x=outD, y=fromAM, zx=isZx, nx=isNx, zy=isZy, ny=isNy, f=isF, no=isN, out=outM, out=aluRes, zr=aluResZr, ng=aluResNg);

    // ALU结果是否置入M
    // 输出writeM
    And(a=isC, b=instruction[3], out=writeM);

    // PC
// 跳转
// 仅凭jjj判断是否跳转
    // ALU结果!=0
    Not(in=aluResZr, out=notZr);
    // ALU结果!<0
    Not(in=aluResNg, out=notNg);
    // >0 等同 !< && !=
    And(a=instruction[0], b=notNg, out=gz1);
    And(a=gz1, b=notZr, out=gz);
    // =0
    And(a=instruction[1], b=aluResZr, out=ez);
    // <0
    And(a=instruction[2], b=aluResNg, out=lz);
    // 是否jump
    Or(a=gz, b=ez, out=jump1);
    Or(a=jump1, b=lz, out=jjjJump);
// 是c指令并且jjj，才跳转
    And(a=isC, b=jjjJump, out=toJump);
    PC(in=outA, load=toJump, inc=true, reset=reset, out[0..14]=pc);
}
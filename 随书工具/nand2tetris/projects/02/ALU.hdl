// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // 所有条件分支通过选择器实现

    // zx
    And16(a=x[0..15], b[0..15]=false, out=zeroX);
    Mux16(a=x[0..15], b=zeroX, sel=zx, out=afterZx);

    // nx
    Not16(in=afterZx, out=notX);
    Mux16(a=afterZx, b=notX, sel=nx, out=afterNx);

    // zy
    And16(a=y[0..15], b[0..15]=false, out=zeroY);
    Mux16(a=y[0..15], b=zeroY, sel=zy, out=afterZy);

    // ny
    Not16(in=afterZy, out=notY);
    Mux16(a=afterZy, b=notY, sel=ny, out=afterNy);

    // f
    Add16(a=afterNx, b=afterNy, out=addXy);
    And16(a=afterNx, b=afterNy, out=andXy);
    Mux16(a=andXy, b=addXy, sel=f, out=afterF);

    // no
    Not16(in=afterF, out=notOut);
    // 输出out
    Mux16(a=afterF, b=notOut, sel=no, out=res, out=out);

    // zr
    // 如果结果值的低15位全0，则结果=0
    Or16(a=res, b[0..15]=false, out[0..7]=lowRes, out[8..14]=highRes);
    // 不可直接使用res[0..7]，需要先通过某个逻辑门将指定位范围输出
    Or8Way(in=lowRes, out=lowZr8);
    Or8Way(in[0..6]=highRes, in[7]=false, out=highZr8);
    Or(a=lowZr8, b=highZr8, out=notZr);
    // 输出zr
    Not(in=notZr, out=zr);

    // ng
    // 如果最高位为1，并且结果非0，则ng=1
    Or16(a=res, b[0..15]=false, out[15]=highestRes);
    Or(a=highestRes, b=false, out=highestResTrue);
    // 输出ng
    And(a=highestResTrue, b=notZr, out=ng);
}